<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://baichuan72f.github.io</id>
    <title>立剑煮酒</title>
    <updated>2020-06-19T09:46:19.327Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://baichuan72f.github.io"/>
    <link rel="self" href="https://baichuan72f.github.io/atom.xml"/>
    <subtitle>依山多秀景，
远路伴光阴。
至理存大善，
长情源自然。
</subtitle>
    <logo>https://baichuan72f.github.io/images/avatar.png</logo>
    <icon>https://baichuan72f.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 立剑煮酒</rights>
    <entry>
        <title type="html"><![CDATA[写给来时的路]]></title>
        <id>https://baichuan72f.github.io/post/xie-gei-lai-shi-de-lu/</id>
        <link href="https://baichuan72f.github.io/post/xie-gei-lai-shi-de-lu/">
        </link>
        <updated>2020-06-19T06:48:40.000Z</updated>
        <content type="html"><![CDATA[<h1 id="写个来时的自己">写个来时的自己</h1>
<p>如果说要写点什么给来时的自己，我脑海中挥之不去的是这样一个画面：<br>
高楼林立的城市里，某个似乎被遗忘的安静角落，一阵微风吹过，一个女孩/男孩忽然想起多年前的一些片段，一位故人。然后时光在这一刻停留。</p>
<p>在我生命不长的经历中<sup>_</sup>，时常会有这个画面的不同版本悄然涌现，挥之不去。<br>
曾经的我以为，这种回忆是我独有，直到有一天，我打开了《奇葩说》(⊙o⊙)…</p>
<h1 id="关于奇葩说中的一个论题">关于奇葩说中的一个论题</h1>
<p>接触奇葩说的时间不算长，但每每对于其中的一些观点表示五体拜服。奇葩说确实是一个各种观点交融的地方。<br>
记得里有一期的论题是这样的：<br>
<strong>伴侣在大城市找到了很好的工作，你要不要放下一切跟ta走？</strong><br>
关于这个问题，可能不同的人有不同的答案，不同的感受。持不同观点的人甚至很难互相理解。<br>
因为城市，故乡，现在，未来，自由，梦想，伴侣都是我们有深刻感受的生命里不可或缺的一部分。<br>
关于这个话题的争论，或许会随着我们的生活，一直延续下去。有兴趣的同学可以去翻出这一期的内容感受一下。<br>
然而我今天，只想讲其中的一个点。可以看做是话题的延伸，也可以说是结合我个人的经历聊下自己的感受。</p>
<h1 id="城市和工作">城市和工作</h1>
<h2 id="1-关于选择">1. 关于选择。</h2>
<p>路有千条，人生却只有一次。如果你还有时间，还有选择，不要犹豫，选自己陌生的那条。<br>
可能你会觉得，这种论断过于草率和武断，但香农的信息论中有一个论断：一条信息的信息量，来自于这条信息包含了多少不确定性。<strong>陌生的选择所包含的信息量，一定是大于一眼望到头的选择</strong>。而有试错机会的情况下，多掌握一些信息，丰富一些人生阅历，从长远看一定是收益大的。当然，这个大是相对的。比如我刚毕业的时候，很幸运有一份稳定的工作，当时自己并不满足，所以就辞职自己去找，结果找到的工作大部分都和之前的工作不在一个档次上。不过后来桩桩件件，还是很庆幸自己幸运的坚持了下来。所以从某一个选择来看，陌生的选择风险更高，但从长远的角度来讲，这个风险带来的收益一定高于稳定。</p>
<h2 id="2-关于城市">2. 关于城市</h2>
<p>个人的观点，大城市有大城市的好，小城市有小城市的美。可以做选择，但不要被限制。<br>
选择大城市，就要做好打拼的准备。大城市是冒险者的乐园，但也是失意者的伤心之地。大城市便利，优越，快节奏，自由。但不可避免的就会要付出代价，有势利，要承受匆忙，忍受冰冷。<br>
选择小城市，就要做好经营的准备。小城市是街里街巷的组合，但也是温水青蛙的熔炉。小城市成本低，也比较有人情味，节奏比较容易跟得上。甚至有时候这样的节奏让年轻人难以忍受。而且当中国式的关系和利益交织的时候，是很难分辨是非对错。这个时候就会有太多的不公平在其中。另外呢，中国现在处于社会变革的时期。稳定中往往也隐藏着更大的风险。所以就需要生活在小城的人不仅有经营之心，更要有着眼更大格局的眼。<br>
但是不管是你开始选择是怎样的，如果让我可以给来时的自己一些建议的话，那就是：<strong>做选择，但不要被选择限制</strong>。大城小城都只是生活的一部分，而不是全部。城市的选择固然会改变很多，但办法总比问题多。不论如何，<strong>珍惜陪你 一直 往前 走 的人</strong>。</p>
<h2 id="3关于工作">3.关于工作</h2>
<p>工作这件事，真的是能决定太多太多。所以每每到这个时候，我就会感叹一下中国的个人职业规划真的是最被低估的一项技能。且不说毕业的第一份工作很多时候就决定社会的起点和方向。哪怕对于很多职场人士，一个选择就可能一着不慎满盘皆输。这一点在疫情中体现的淋漓尽致。<br>
虽然对于工作的话题，会无限的延展下去，但是个人比较喜欢的还是行业企业职业分析方法。对于一个工作，很重要的一点是要<strong>明确定位</strong>，它属于行业，当前处于什么阶段。属于哪个企业，在行业中的位置如何。这个职位有哪些职业发展，当前职位有哪些要求。掌握了这些，才能够说在一个比较理性的基础上进行选择。<br>
如果你已经有了心意的目标岗位，那么如何快速的得到它呢？当然实操层面还是圈子能力特色会更加贴近现实一些。要明确这个岗位所需的能力是什么，如果有哪些特点会是加分项。然后在网上找一些相关的圈子混一混，熟悉一下感觉。同时呢，找一两个大佬想办法咨询一下。提前的功课一定要做好，做扎实。得到方法和路径之后要专注目标。<strong>用实际行动争取自己想要的东西</strong>。</p>
<h1 id="后记">后记</h1>
<p>詹青云的文字整理如下：</p>
<p>我什么时候感觉到非常的遗憾？我们为什么没有更努力，彼此妥协一点去更努力的在一起呢。不是我在美国学习压力很大，但是没有时间哭的时候，不是要一个人学着修马桶和装家具的时候，也不是在大街上被抢劫，心里害怕的要命，但是跟警察做笔录，却拼命想着要怎么跟老板请假的时候。生活会教会我们很多，多的是一些我们以为自己做不到的事，可是有一天我就从超市买了东西，提着塑料袋在波士顿的那个街上走，看到满天的落叶飘下来。就那一瞬间，我就在想。为什么我要在最好的年纪，离开你呢？</p>
<p>当我走过这一回，我不曾后悔，我曾在那样好的年纪离开你。当我回忆起的时候，它很痛，很无奈，也每每让我后怕，但从某种意义上讲，是我的不知天高地厚，是你的坚持。成就了我们现在，也就成了在未来可以回忆的过去。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[以 DOTS-StreamingSamples 案例解析资源加载过程（一）]]></title>
        <id>https://baichuan72f.github.io/post/yi-dots-streamingsamples-an-li-jie-xi-zi-yuan-jia-zai-guo-cheng/</id>
        <link href="https://baichuan72f.github.io/post/yi-dots-streamingsamples-an-li-jie-xi-zi-yuan-jia-zai-guo-cheng/">
        </link>
        <updated>2020-05-08T02:34:52.000Z</updated>
        <summary type="html"><![CDATA[<p>DOTS-StreamingSamples是Unity官方的DOTS系列案例之一，目前还处于开发阶段。对于Unity未来的编程模式来说，DOTS一定是趋势。另外由于DOTS良好的多线程能力，所以很适合做资源加载方面的案例。所以这次先以DOTS-StreamingSamples来上手熟悉一下DOTS以及Streaming。</p>
]]></summary>
        <content type="html"><![CDATA[<p>DOTS-StreamingSamples是Unity官方的DOTS系列案例之一，目前还处于开发阶段。对于Unity未来的编程模式来说，DOTS一定是趋势。另外由于DOTS良好的多线程能力，所以很适合做资源加载方面的案例。所以这次先以DOTS-StreamingSamples来上手熟悉一下DOTS以及Streaming。</p>
<!-- more -->
<h1 id="项目克隆">项目克隆</h1>
<p>项目地址是https://github.com/Unity-Technologies/DOTS-StreamingSamples.git<br>
目前的版本是：<br>
<img src="https://baichuan72f.github.io/post-images/1588906057335.png" alt="" loading="lazy"><br>
使用git Clone以后在本地使用Unity打开。项目结构如下：<br>
<img src="https://baichuan72f.github.io/post-images/1588906126145.png" alt="" loading="lazy"></p>
<!-- more -->
<h1 id="主要代码结构">主要代码结构</h1>
<p>使用编辑器打开，我这里用的是Rider，在Assets/Scripts下面是主要的脚本，不多，只有三个。<br>
分别是：</p>
<ol>
<li>ProceduralScatter：Tile的内部逻辑</li>
<li>ProceduralScatterAuthoring：Entity实体和mono转换逻辑</li>
<li>TrivialScatterSystem：System处理Tile逻辑</li>
</ol>
<!-- more -->
<p>使用时，会将Authoring挂载到GameObject上，作为程序的实体输入。进入系统后TrivialScatterSystem会先处理Tile逻辑，ProceduralScatter则后处理Tile内逻辑。最终显示出来想要的效果。</p>
<!-- more -->
<h2 id="proceduralscatterauthoring">ProceduralScatterAuthoring</h2>
<p>为了理解方便，我们先从ProceduralScatterAuthoring开始，以下是具体实现：<br>
<img src="https://baichuan72f.github.io/post-images/1588908484834.png" alt="" loading="lazy"><br>
Data是基本数据，用来在面板上指定预制体和初始化所需参数。</p>
<!-- more -->
<pre><code>public struct Data
{  
    public GameObject Prefab;  //待实例的物体名称
    public float ScatterRadius;  //物体半径
    public float3 PlacementOffset;  //物体实例时的偏移
}  
</code></pre>
<!-- more -->
<p>Convert方法和DeclareReferencedPrefabs将数据推入System中</p>
<!-- more -->
<pre><code>public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)
</code></pre>
<!-- more -->
<p>entity为实体，<br>
dstManager为实例管理者，<br>
conversionSystem为接收实体的System</p>
<!-- more -->
<pre><code>public void DeclareReferencedPrefabs(List&lt;GameObject&gt; referencedPrefabs)
</code></pre>
<!-- more -->
<p>referencedPrefabs为待使用的实体引用（可以供System在场景中显示的物体列表）</p>
<h1 id="trivialscattersystem">TrivialScatterSystem</h1>
<p>TrivialScatterSystem是系统中处理Tile的地方。<br>
<img src="https://baichuan72f.github.io/post-images/1588992994974.png" alt="" loading="lazy"><br>
JobComponentSystem的书写风格沿用MonoBehaviour,脚本内逻辑如下：<br>
1.  OnCreate()  中对各个变量进行初始化<br>
2. <code>OnUpdate</code>(JobHandle inputDeps)中会在每次循环时进行更新处理<br>
3. 一般在处理过程中会调用继承Job接口的结构体，执行结构体内的Execute()逻辑<br>
4. OnUpdate提供一个JobHandle参数并且最终返回一个JobHandle，这个参数可以作为在OnUpdate内部链接多个Job的一个主线。同时也是多个OnUpdate自动串联的依据。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[将Quixel Bridge资源导出到Unity]]></title>
        <id>https://baichuan72f.github.io/post/jiang-quixel-bridge-zi-yuan-dao-chu-dao-unity/</id>
        <link href="https://baichuan72f.github.io/post/jiang-quixel-bridge-zi-yuan-dao-chu-dao-unity/">
        </link>
        <updated>2020-05-06T02:06:56.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="quixel-bridge-用途介绍">Quixel Bridge 用途介绍</h1>
]]></summary>
        <content type="html"><![CDATA[<h1 id="quixel-bridge-用途介绍">Quixel Bridge 用途介绍</h1>
<!-- more -->
<p>作为一个Unity程序员，经常会遇到这样的情况：自己有非常好的想法也具备一定的编程能力。但是想要完成这个想法时，单独配备一个模型美术来配合自己有点太奢侈，经常打扰美术同学又不好意思。或者呢，条件不太允许自己去配置模型人员。这个时候往往就需要我们寻求一些现有资源的帮助。<br>
Quixel Bridge就是这样一款为各类设计师和攻城狮提供现有三维模型材质等的强大资产库。</p>
<!-- more -->
<h1 id="quixel-bridge-下载安装网址">Quixel Bridge 下载安装网址</h1>
<!-- more -->
<ol>
<li>打开网址 https://quixel.com/bridge<br>
<img src="https://baichuan72f.github.io/post-images/1588732083181.png" alt="" loading="lazy"></li>
<li>点击 DownLoad For Free</li>
<li>下载后依次安装</li>
</ol>
<!-- more -->
<h1 id="quixel-bridge资源导出到unity">Quixel Bridge资源导出到Unity</h1>
<!-- more -->
<ol>
<li>打开软件后是下图这个样子<br>
<img src="https://baichuan72f.github.io/post-images/1588733578405.png" alt="" loading="lazy"><br>
Quixel Bridge允许用户在线预览和下载相关的资产内容。<br>
目前使用UE4账号可以免费下载所有资源！<br>
<img src="https://baichuan72f.github.io/post-images/1588735234328.png" alt="" loading="lazy"></li>
<li>下载后的资源在此处找到<br>
<img src="https://baichuan72f.github.io/post-images/1588733934505.jpg" alt="" loading="lazy"></li>
<li>点击其中的某一资源即可查看资源详情<br>
<img src="https://baichuan72f.github.io/post-images/1588734030885.jpg" alt="" loading="lazy"></li>
<li>可以在下载时选择所需的资源选项（注意更改选项后需重启软件）<br>
<img src="https://baichuan72f.github.io/post-images/1588734165927.png" alt="" loading="lazy"></li>
<li>导出设置选择Unity,路径选择Unity中的工程路径<br>
<img src="https://baichuan72f.github.io/post-images/1588734246555.png" alt="" loading="lazy"></li>
<li>点击Open Plugin Folder找到插件并导入Unity<br>
<img src="https://baichuan72f.github.io/post-images/1588734347542.png" alt="" loading="lazy"></li>
<li>点开Edit/Settings/MoreSettings并且将API PORT VALUE改为Unity默认的通讯端口13081<br>
<img src="https://baichuan72f.github.io/post-images/1588735832547.jpg" alt="" loading="lazy"></li>
<li>确认导出选项后，就可以重启软件然后再次按照步骤导出资源了。第二次导出时，只需要注意步骤5的导出路径即可。<br>
<img src="https://baichuan72f.github.io/post-images/1588734403204.png" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写给自己的成长之路]]></title>
        <id>https://baichuan72f.github.io/post/xie-gei-zi-ji-de-cheng-chang-zhi-lu/</id>
        <link href="https://baichuan72f.github.io/post/xie-gei-zi-ji-de-cheng-chang-zhi-lu/">
        </link>
        <updated>2020-04-07T07:50:33.000Z</updated>
        <summary type="html"><![CDATA[<p>构思写一个自己的博客的想法已经很久了，期间浮浮沉沉终于写出 Hello World...</p>
]]></summary>
        <content type="html"><![CDATA[<p>构思写一个自己的博客的想法已经很久了，期间浮浮沉沉终于写出 Hello World...</p>
<!-- more -->
<p>具体内容自己也纠结了一段时间，最终最打动我的还是记录下自己的成长之路。</p>
<!-- more -->
<p>很多时候我们在别人的目光中偏偏起舞，身上也被各种各样的名利线缠绕，在欲望和情绪的海洋中不由自主的漂浮。</p>
<!-- more -->
<p>但是这一次，让我们重新出发，只为了在这纷扰的世界中留下自己的一抹刻痕！let's go!😎😎😎</p>
]]></content>
    </entry>
</feed>